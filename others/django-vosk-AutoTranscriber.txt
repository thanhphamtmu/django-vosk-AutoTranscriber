Repository: thanhphamtmu/django-vosk-autotranscriber
Files analyzed: 23

Estimated tokens: 5.8k

Directory structure:
‚îî‚îÄ‚îÄ thanhphamtmu-django-vosk-autotranscriber/
    ‚îú‚îÄ‚îÄ README.md
    ‚îú‚îÄ‚îÄ LICENSE
    ‚îú‚îÄ‚îÄ manage.py
    ‚îú‚îÄ‚îÄ requirements.txt
    ‚îú‚îÄ‚îÄ media/
    ‚îÇ   ‚îî‚îÄ‚îÄ uploads/
    ‚îú‚îÄ‚îÄ myproject/
    ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
    ‚îÇ   ‚îú‚îÄ‚îÄ asgi.py
    ‚îÇ   ‚îú‚îÄ‚îÄ settings.py
    ‚îÇ   ‚îú‚îÄ‚îÄ urls.py
    ‚îÇ   ‚îî‚îÄ‚îÄ wsgi.py
    ‚îî‚îÄ‚îÄ speech/
        ‚îú‚îÄ‚îÄ __init__.py
        ‚îú‚îÄ‚îÄ admin.py
        ‚îú‚îÄ‚îÄ apps.py
        ‚îú‚îÄ‚îÄ consumers.py
        ‚îú‚îÄ‚îÄ forms.py
        ‚îú‚îÄ‚îÄ models.py
        ‚îú‚îÄ‚îÄ routing.py
        ‚îú‚îÄ‚îÄ serializers.py
        ‚îú‚îÄ‚îÄ tests.py
        ‚îú‚îÄ‚îÄ urls.py
        ‚îú‚îÄ‚îÄ views.py
        ‚îú‚îÄ‚îÄ vosk_utils.py
        ‚îî‚îÄ‚îÄ templates/
            ‚îú‚îÄ‚îÄ list.html
            ‚îî‚îÄ‚îÄ upload.html


================================================
FILE: README.md
================================================
# üéôÔ∏è Audio Transcription Platform (VOSK + Django)

H·ªá th·ªëng web v√† API REST gi√∫p ng∆∞·ªùi d√πng t·∫£i l√™n c√°c file √¢m thanh, t·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi th√†nh vƒÉn b·∫£n ti·∫øng Vi·ªát, cung c·∫•p giao di·ªán web, API b·∫£o m·∫≠t, v√† c·∫≠p nh·∫≠t realtime qua WebSocket.

## üöÄ T√≠nh nƒÉng

- ‚úÖ T·∫£i l√™n file √¢m thanh `.wav`, `.mp3`, `.m4a`, v.v.
- ‚úÖ T·ª± ƒë·ªông chuy·ªÉn gi·ªçng n√≥i th√†nh vƒÉn b·∫£n v·ªõi [VOSK](https://alphacephei.com/vosk/)
- ‚úÖ Tr√≠ch xu·∫•t th·ªùi gian v√† ph√¢n ƒëo·∫°n h·ªôi tho·∫°i
- ‚úÖ Xem danh s√°ch, t√¨m ki·∫øm v√† xu·∫•t k·∫øt qu·∫£ sang `.txt`, `.pdf`
- ‚úÖ C·∫≠p nh·∫≠t realtime qua WebSocket
- ‚úÖ API REST chu·∫©n JWT ƒë·ªÉ t√≠ch h·ª£p b√™n th·ª© ba

## üõ†Ô∏è C√¥ng ngh·ªá s·ª≠ d·ª•ng

- Python 3.10+
- Django 4.x
- Django REST Framework
- Django Channels (ASGI, WebSocket)
- Vosk Speech Recognition (Vietnamese)
- FFMPEG (chuy·ªÉn ƒë·ªïi √¢m thanh)
- ReportLab (PDF export)
- JWT (SimpleJWT)

## üß± C·∫•u tr√∫c d·ª± √°n

```
‚îú‚îÄ‚îÄ vosk_utils.py        # X·ª≠ l√Ω nh·∫≠n d·∫°ng gi·ªçng n√≥i
‚îú‚îÄ‚îÄ models.py            # Model l∆∞u file v√† transcript
‚îú‚îÄ‚îÄ views.py             # Views upload, list, export
‚îú‚îÄ‚îÄ serializers.py       # API serializers
‚îú‚îÄ‚îÄ forms.py             # Form upload file
‚îú‚îÄ‚îÄ urls.py              # Routing HTTP
‚îú‚îÄ‚îÄ routing.py           # Routing WebSocket
‚îú‚îÄ‚îÄ consumers.py         # WebSocket consumer
‚îú‚îÄ‚îÄ admin.py             # Giao di·ªán admin
```

## üîß C√†i ƒë·∫∑t

### 1. C√†i ƒë·∫∑t m√¥i tr∆∞·ªùng

```bash
python -m venv venv
source venv/bin/activate
pip install -r requirements.txt
```

### 2. T·∫£i m√¥ h√¨nh VOSK (Vietnamese)

T·∫£i t·ª´: [https://alphacephei.com/vosk/models](https://alphacephei.com/vosk/models)

Gi·∫£i n√©n v√†o th∆∞ m·ª•c:
```
/speech/vosk-model-small-vn-0.4
```

### 3. C√†i ƒë·∫∑t FFMPEG

Ubuntu:
```bash
sudo apt update && sudo apt install ffmpeg
```

Windows/macOS: [https://ffmpeg.org/download.html](https://ffmpeg.org/download.html)

### 4. Ch·∫°y migrations v√† server

```bash
python manage.py migrate
python manage.py runserver
```

## üîê API s·ª≠ d·ª•ng

- **POST /api/audio/**: Upload file audio
- **GET /api/audio/**: Danh s√°ch file v√† transcript
> Y√™u c·∫ßu `JWT Authentication`

## üåê Giao di·ªán web

- `/upload/`: T·∫£i file l√™n
- `/list/`: Danh s√°ch v√† t√¨m ki·∫øm transcript
- `/export/txt/<id>/`: Xu·∫•t `.txt`
- `/export/pdf/<id>/`: Xu·∫•t `.pdf`

## üì° WebSocket

- `ws://<host>/ws/audio/`: Nh·∫≠n realtime update khi file m·ªõi ƒë∆∞·ª£c x·ª≠ l√Ω

## üìÑ License

MIT License.



================================================
FILE: LICENSE
================================================
MIT License

Copyright (c) 2025 PH·∫†M NG·ªåC THANH

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: manage.py
================================================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproject.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()



================================================
FILE: requirements.txt
================================================
[Non-text file]



================================================
FILE: myproject/__init__.py
================================================




================================================
FILE: myproject/asgi.py
================================================
import os

from channels.auth import AuthMiddlewareStack
from channels.routing import ProtocolTypeRouter, URLRouter
from django.core.asgi import get_asgi_application

import speech.routing

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproject.settings")

application = ProtocolTypeRouter(
    {
        "http": get_asgi_application(),
        "websocket": AuthMiddlewareStack(
            URLRouter(speech.routing.websocket_urlpatterns)
        ),
    }
)



================================================
FILE: myproject/settings.py
================================================
"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-r25&_-_8rlfj@m)!i_)yrx&2+6dor0fm20^p5&2bdj+!gt1fl4"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",
    "channels",
    "speech",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "myproject.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "myproject.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Channels
ASGI_APPLICATION = "myproject.asgi.application"

# C·∫•u h√¨nh k√™nh m·∫∑c ƒë·ªãnh (d√πng Redis n·∫øu c·∫ßn m·ªü r·ªông)
CHANNEL_LAYERS = {
    "default": {"BACKEND": "channels.layers.InMemoryChannelLayer"},
}

# REST framework c·∫•u h√¨nh JWT
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    )
}

# Static file
STATIC_URL = "/static/"

# Template
TEMPLATES[0]["DIRS"] = [BASE_DIR / "speech" / "templates"]

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")



================================================
FILE: myproject/urls.py
================================================
from django.contrib import admin
from django.urls import include, path
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView

urlpatterns = [
    path("admin/", admin.site.urls),
    path("", include("speech.urls")),
    # JWT Authentication
    path("api/token/", TokenObtainPairView.as_view(), name="token_obtain_pair"),
    path("api/token/refresh/", TokenRefreshView.as_view(), name="token_refresh"),
]



================================================
FILE: myproject/wsgi.py
================================================
"""
WSGI config for myproject project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproject.settings")

application = get_wsgi_application()



================================================
FILE: speech/__init__.py
================================================




================================================
FILE: speech/admin.py
================================================
from django.contrib import admin

from .models import AudioFile


@admin.register(AudioFile)
class AudioFileAdmin(admin.ModelAdmin):
    list_display = ("id", "audio", "short_transcript")
    readonly_fields = ("transcript", "dialogues")

    def short_transcript(self, obj):
        return obj.transcript[:75] + "..." if obj.transcript else "(Ch∆∞a x·ª≠ l√Ω)"



================================================
FILE: speech/apps.py
================================================
from django.apps import AppConfig


class SpeechConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "speech"



================================================
FILE: speech/consumers.py
================================================
import json

from channels.generic.websocket import AsyncWebsocketConsumer


class AudioConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        await self.channel_layer.group_add("audio_updates", self.channel_name)
        await self.accept()

    async def disconnect(self, close_code):
        await self.channel_layer.group_discard("audio_updates", self.channel_name)

    async def audio_update(self, event):
        await self.send(text_data=json.dumps(event["data"]))



================================================
FILE: speech/forms.py
================================================
from django import forms

from .models import AudioFile


class AudioFileForm(forms.ModelForm):
    class Meta:
        model = AudioFile
        fields = ["audio"]



================================================
FILE: speech/models.py
================================================
import os
import time
from django.db import models
from django.utils.text import slugify
from .vosk_utils import process_audio_file


def upload_to_with_timestamp(instance, filename):
    name, ext = os.path.splitext(filename)
    timestamp = time.strftime("%Y-%m-%d_%H-%M-%S")
    safe_name = slugify(name)
    return f"uploads/{timestamp}_{safe_name}{ext}"


class AudioFile(models.Model):
    audio = models.FileField(upload_to=upload_to_with_timestamp, blank=True, null=True)
    transcript = models.TextField(blank=True, editable=False)
    dialogues = models.TextField(blank=True, editable=False)

    def save(self, *args, **kwargs):
        is_new = self._state.adding and self.audio
        super().save(*args, **kwargs)

        if is_new and (not self.transcript or not self.dialogues):
            try:
                path = self.audio.path
                self.transcript, self.dialogues = process_audio_file(path)
                super().save(update_fields=["transcript", "dialogues"])
            except Exception as e:
                raise RuntimeError(f"L·ªói x·ª≠ l√Ω file √¢m thanh: {e}")



================================================
FILE: speech/routing.py
================================================
from django.urls import re_path

from . import consumers

websocket_urlpatterns = [
    re_path(r"ws/audio/$", consumers.AudioConsumer.as_asgi()),
]



================================================
FILE: speech/serializers.py
================================================
from rest_framework import serializers

from .models import AudioFile


class AudioFileSerializer(serializers.ModelSerializer):
    class Meta:
        model = AudioFile
        fields = ["id", "audio", "transcript", "dialogues"]
        read_only_fields = ["transcript", "dialogues"]



================================================
FILE: speech/tests.py
================================================
from django.test import TestCase

# Create your tests here.



================================================
FILE: speech/urls.py
================================================
from django.urls import path

from . import views

urlpatterns = [
    path("upload/", views.upload_audio, name="upload_audio"),
    path("list/", views.list_audio, name="list_audio"),
    path("export/txt/<int:pk>/", views.export_txt, name="export_txt"),
    path("export/pdf/<int:pk>/", views.export_pdf, name="export_pdf"),
    # API
    path("api/audio/", views.AudioFileUploadAPI.as_view(), name="api_audio"),
]



================================================
FILE: speech/views.py
================================================
import os
import time
from io import BytesIO

from asgiref.sync import async_to_sync
from channels.layers import get_channel_layer
from django.core.paginator import Paginator
from django.http import HttpResponse
from django.shortcuts import get_object_or_404, redirect, render

# --- Giao di·ªán ng∆∞·ªùi d√πng ---
from django.utils.text import slugify
from reportlab.pdfgen import canvas
from rest_framework import generics
from rest_framework.permissions import IsAuthenticated

# from rest_framework.authentication import JWTAuthentication
from rest_framework_simplejwt.authentication import JWTAuthentication

from .forms import AudioFileForm
from .models import AudioFile
from .serializers import AudioFileSerializer


def rename_uploaded_file(file):
    ext = os.path.splitext(file.name)[1]
    timestamp = time.strftime("%Y-%m-%d_%H-%M-%S")
    base_name = slugify(os.path.splitext(file.name)[0]) or "audio"
    return f"{timestamp}_{base_name}{ext}"


def upload_audio(request):
    if request.method == "POST":
        file = request.FILES.get("audio")
        if file:
            file.name = rename_uploaded_file(file)

        form = AudioFileForm(request.POST, request.FILES)
        if form.is_valid():
            instance = form.save()
            broadcast_update(instance)
            return redirect("list_audio")
    else:
        form = AudioFileForm()
    return render(request, "upload.html", {"form": form})


def list_audio(request):
    query = request.GET.get("q", "")
    files = AudioFile.objects.all()
    if query:
        files = files.filter(audio__icontains=query) | files.filter(
            transcript__icontains=query
        )

    paginator = Paginator(files.order_by("-id"), 10)
    page_number = request.GET.get("page")
    page_obj = paginator.get_page(page_number)
    return render(request, "list.html", {"page_obj": page_obj, "query": query})


def export_txt(request, pk):
    file = get_object_or_404(AudioFile, pk=pk)
    response = HttpResponse(file.transcript, content_type="text/plain")
    response["Content-Disposition"] = f'attachment; filename="transcript_{pk}.txt"'
    return response


def export_pdf(request, pk):
    file = get_object_or_404(AudioFile, pk=pk)
    buffer = BytesIO()
    p = canvas.Canvas(buffer)
    textobject = p.beginText(40, 800)
    for line in file.transcript.splitlines():
        textobject.textLine(line)
        if textobject.getY() < 50:
            p.drawText(textobject)
            p.showPage()
            textobject = p.beginText(40, 800)
    p.drawText(textobject)
    p.showPage()
    p.save()
    buffer.seek(0)

    response = HttpResponse(buffer, content_type="application/pdf")
    response["Content-Disposition"] = f'attachment; filename="transcript_{pk}.pdf"'
    return response


# --- REST API ---
class AudioFileUploadAPI(generics.ListCreateAPIView):
    queryset = AudioFile.objects.all().order_by("-id")
    serializer_class = AudioFileSerializer
    authentication_classes = [JWTAuthentication]
    permission_classes = [IsAuthenticated]

    def perform_create(self, serializer):
        instance = serializer.save()
        broadcast_update(instance)


# --- WebSocket Broadcast ---
def broadcast_update(instance):
    channel_layer = get_channel_layer()
    async_to_sync(channel_layer.group_send)(
        "audio_updates",
        {
            "type": "audio_update",
            "data": {
                "id": instance.id,
                "filename": instance.audio.name,
                "transcript": instance.transcript[:50],
            },
        },
    )



================================================
FILE: speech/vosk_utils.py
================================================
import json
import os
import subprocess
import tempfile
import unicodedata
import wave
from vosk import KaldiRecognizer, Model
from django.conf import settings

_model = None



def get_model():
    global _model
    if _model is None:
        model_path = os.path.join(settings.BASE_DIR, "speech", "vosk-model-small-vn-0.4")
        if not os.path.exists(model_path):
            raise FileNotFoundError(f"Model Vosk kh√¥ng t√¨m th·∫•y t·∫°i {model_path}")
        _model = Model(model_path)
    return _model


def normalize_text(text):
    text = unicodedata.normalize("NFC", text)
    return text.strip().capitalize()


def process_audio_file(file_path):
    temp_wav = tempfile.NamedTemporaryFile(delete=False, suffix=".wav").name

    try:
        convert_cmd = [
            "ffmpeg",
            "-y",
            "-i", file_path,
            "-ar", "16000",
            "-ac", "1",
            "-acodec", "pcm_s16le",
            temp_wav,
        ]
        result = subprocess.run(
            convert_cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        if result.returncode != 0:
            raise RuntimeError(f"FFmpeg l·ªói: {result.stderr.decode()}")

        full_text = []
        segments = []

        with wave.open(temp_wav, "rb") as wf:
            rec = KaldiRecognizer(get_model(), wf.getframerate())
            rec.SetWords(True)

            while True:
                data = wf.readframes(4000)
                if len(data) == 0:
                    break
                if rec.AcceptWaveform(data):
                    res = json.loads(rec.Result())
                    text = normalize_text(res.get("text", ""))
                    if text:
                        full_text.append(text)
                        segments.append(format_segment(res))

            final = json.loads(rec.FinalResult())
            text = normalize_text(final.get("text", ""))
            if text:
                full_text.append(text)
                segments.append(format_segment(final))

        return " ".join(full_text), "\n".join(segments)

    finally:
        if os.path.exists(temp_wav):
            os.remove(temp_wav)


def format_segment(result):
    if "result" not in result:
        return ""
    words = result["result"]
    if not words:
        return ""

    start = words[0]["start"]
    end = words[-1]["end"]
    text = normalize_text(result.get("text", ""))

    start_ts = format_timestamp(start)
    end_ts = format_timestamp(end)
    return f"[{start_ts} - {end_ts}]: {text}"


def format_timestamp(seconds):
    m, s = divmod(int(seconds), 60)
    h, m = divmod(m, 60)
    return f"{h:02}:{m:02}:{s:02}"



================================================
FILE: speech/templates/list.html
================================================
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8" />
  <title>Danh s√°ch Audio</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50 p-10">
  <div class="max-w-4xl mx-auto bg-white p-6 rounded-xl shadow-md">
    <h2 class="text-2xl font-bold mb-4">Danh s√°ch file ƒë√£ x·ª≠ l√Ω</h2>

    <form method="get" class="mb-4 flex gap-2">
      <input type="text" name="q" value="{{ query }}" placeholder="T√¨m ki·∫øm..."
             class="flex-1 border border-gray-300 rounded p-2">
      <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">T√¨m</button>
    </form>

    <ul class="space-y-4 text-sm">
      {% for f in page_obj %}
        <li class="border-b pb-2">
          <strong>{{ f.audio.name }}</strong><br>
          <span class="text-gray-500">Transcript:</span> {{ f.transcript|truncatechars:200 }}<br>
          <a class="text-blue-600 underline" href="{% url 'export_txt' f.id %}">TXT</a> |
          <a class="text-green-600 underline" href="{% url 'export_pdf' f.id %}">PDF</a>
        </li>
      {% empty %}
        <li>Kh√¥ng c√≥ k·∫øt qu·∫£.</li>
      {% endfor %}
    </ul>

    <div class="mt-6 text-center">
      {% if page_obj.has_previous %}
        <a href="?page={{ page_obj.previous_page_number }}&q={{ query }}"
           class="px-4 py-2 bg-gray-200 rounded">Trang tr∆∞·ªõc</a>
      {% endif %}

      <span class="px-4">Trang {{ page_obj.number }} / {{ page_obj.paginator.num_pages }}</span>

      {% if page_obj.has_next %}
        <a href="?page={{ page_obj.next_page_number }}&q={{ query }}"
           class="px-4 py-2 bg-gray-200 rounded">Trang sau</a>
      {% endif %}
    </div>
  </div>
</body>
</html>



================================================
FILE: speech/templates/upload.html
================================================
{% load static %}
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8" />
  <title>Upload File</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://unpkg.com/filepond/dist/filepond.css" rel="stylesheet" />
  <script src="https://unpkg.com/filepond/dist/filepond.js"></script>
</head>
<body class="bg-gray-100 p-10">
  <div class="max-w-2xl mx-auto bg-white shadow-md rounded-xl p-6">
    <h2 class="text-xl font-semibold mb-4">T·∫£i l√™n √¢m thanh (FilePond Realtime)</h2>
    <input type="file" id="audioInput" name="audio" />
    <div id="resultMsg" class="mt-4 text-sm text-gray-600"></div>
    <ul id="realtimeList" class="mt-6 space-y-2 text-sm text-gray-800"></ul>
  </div>

  <script>
    const pond = FilePond.create(document.getElementById('audioInput'));
    pond.setOptions({
      server: {
        process: {
          url: '/api/audio/',
          method: 'POST',
          headers: {
            'Authorization': 'Bearer ' + localStorage.getItem('access_token')
          },
          onload: () => {
            document.getElementById('resultMsg').textContent = '‚úÖ T·∫£i l√™n th√†nh c√¥ng!';
          },
          onerror: err => {
            document.getElementById('resultMsg').textContent = '‚ùå L·ªói: ' + err;
          }
        }
      }
    });

    const socket = new WebSocket('ws://' + window.location.host + '/ws/audio/');
    socket.onmessage = function(e) {
      const data = JSON.parse(e.data);
      const ul = document.getElementById('realtimeList');
      const li = document.createElement('li');
      li.textContent = `${data.filename.split('/').pop()} - ${data.transcript}...`;
      ul.prepend(li);
    };
  </script>
</body>
</html>


